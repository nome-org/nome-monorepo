// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  CONFIRMED
}

enum OrderStatus {
  // first order is created pending payment
  UNPAID
  // then the user pays the payment tx can be seen on the blockchain
  PAYMENT_PENDING
  // then the ordinals bot creates the image ordinals
  IMAGE_ORDINALS_PENDING
  // then the ordinals bot creates the html ordinals
  HTML_ORDINALS_PENDING
  READY
}

enum DelegateOrdinalStatus {
  UNPAID
  PENDING
  CONFIRMED
}

model Order {
  id                    Int         @id @default(autoincrement())
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  ordinals_bot_order_id String?     @unique @db.VarChar(255)
  total_fee             Int
  fee_rate              Int
  rarity                String      @db.VarChar(255)
  receiver_address      String      @db.VarChar(255)
  update_token          String?     @unique @db.VarChar(255)
  status                OrderStatus @default(UNPAID)
  payment_tx_id         String?     @unique @db.VarChar(255)
  image_ordinals        Ordinal[]   @relation(name: "image_files")
  html_ordinals         Ordinal[]   @relation(name: "html_files")
  quantity              Int
}

model Ordinal {
  id                    Int               @id @default(autoincrement())
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
  name                  String            @db.VarChar(255)
  hash                  String            @db.VarChar(255)
  type                  String            @db.VarChar(255)
  size                  Int
  duration              Int
  tx_id                 String?           @unique @db.VarChar(255)
  tx_status             TransactionStatus @default(PENDING)
  ordinals_bot_order_id String            @db.VarChar(255)
  ordinal_index         Int?
  image_files_order_id  Int?
  image_files_order     Order?            @relation(name: "image_files", fields: [image_files_order_id], references: [id])
  html_files_order_id   Int?
  html_files_order      Order?            @relation(name: "html_files", fields: [html_files_order_id], references: [id])
  receiver_address      String            @db.VarChar(255)
  is_open_source        Boolean           @default(false)
}

model UserSession {
  id              Int      @id @default(autoincrement())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  ordinal_address String   @db.VarChar(255)
  public_key      String   @unique @db.VarChar(255)
  last_checked_at DateTime @default(now())
  is_expired      Boolean  @default(false)
  user            User     @relation(fields: [ordinal_address], references: [ordinal_address])
}

model DelegateOrdinal {
  id               Int                   @id @default(autoincrement())
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
  minter_address   String                @db.VarChar(255)
  receiver_address String                @db.VarChar(255)
  tx_status        DelegateOrdinalStatus @default(UNPAID)
  total_fee        Int
  fee_rate         Int
  payment_tx_id    String?               @db.VarChar(255)
  tx_id            String?               @unique @db.VarChar(255)
  ordinal_index    Int?
}

model User {
  id              Int           @id @default(autoincrement())
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  ordinal_address String        @unique @db.VarChar(255)
  email           String?       @db.VarChar(255)
  sessions        UserSession[]
}
